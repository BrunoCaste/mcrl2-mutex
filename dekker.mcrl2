act wish, enter, leave: Nat;
    get_flag_r, get_flag_s, get_flag,
      set_flag_r, set_flag_s, set_flag: Nat # Bool;
    get_turn_r, get_turn_s, get_turn,
      set_turn_r,set_turn_s,set_turn: Nat;

map other: Nat -> Nat;
eqn other(0) = 1;
    other(1) = 0;

proc
  Flag(id: Nat, b: Bool) =
    sum b': Bool. set_flag_r(id, b').Flag(id, b') +
    get_flag_s(id, b).Flag(id, b);

  Turn(n:Nat) =
    sum n': Nat. set_turn_r(n').Turn(n') + get_turn_s(n).Turn(n);

  Process(id: Nat) =
    wish(id)|set_flag_s(id, true).              % flag[id] = true
    Loop(id);

  Loop(id: Nat) =
    sum b: Bool. get_flag_r(other(id), b). b -> % while flag[other(id)] {
      ( get_turn_r(id). Loop(id) +              %   if turn != id {
        set_flag_s(id, false).                  %     flag[id] = false
        get_turn_r(id).                         %     while turn != id {}
        set_flag_s(id, true).                   %     flag[id] = true
        Loop(id))                               %   }
      <> (enter(id).leave(id).                  % # sección crítica
          set_turn_s(other(id)).                % turn = other(id)
          set_flag_s(id, false).                % flag[id] = false
          Process(id));


init
  hide({ get_flag, set_flag, get_turn, set_turn },
    allow({ wish|set_flag, enter, leave,
            get_flag, set_flag, get_turn, set_turn},
      comm({ get_flag_r | get_flag_s -> get_flag,
             set_flag_r | set_flag_s -> set_flag,
             get_turn_r | get_turn_s -> get_turn,
             set_turn_r | set_turn_s -> set_turn },
      Process(0) || Process(1) ||
      Flag(0,false) || Flag(1,false) || Turn(0))));
